# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Tests

# Whenever there is a pull request (PR) or push to the "main" branch, the jobs specified below will run.
on: 
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Here, we specify the automatic cloud based testing that will be ran on pushes/PRs to "main"
jobs:
  build:

    # The tests will run on ubuntu with python versions 3.10.
    # Add other OSes like windows and macOS if needed as well as other Python versions  
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]

    steps:
      # The steps here are essentially command-line arguments that will be ran on the cloud with the above configurations  
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

      # Here we install the package of this repositories as well as other required packages 
    - name: Install dependencies
      run: | 
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install -U jax
        pip install -e .
        python -m pip install coveralls
    - name: Download CUTEst sources
      run: |
        mkdir cutest
        cd cutest
        git clone https://github.com/ralna/ARCHDefs ./archdefs    # ; cd archdefs; git checkout v2.2.8; cd ..
        git clone https://github.com/ralna/SIFDecode ./sifdecode  # ; cd sifdecode; git checkout v2.4.2; cd ..
        git clone https://github.com/ralna/CUTEst ./cutest
        cd cutest; git checkout v2.2.0; cd ..
        git clone https://bitbucket.org/optrove/sif ./mastsif
        cd ..

    - name: Install CUTEst and pyCUTEst
      env:
        ARCHDEFS: ${{github.workspace}}/cutest/archdefs
        SIFDECODE: ${{github.workspace}}/cutest/sifdecode
        MASTSIF: ${{github.workspace}}/cutest/mastsif
        CUTEST: ${{github.workspace}}/cutest/cutest
        MYARCH: "pc64.lnx.gfo"
      run: |
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/jfowkes/pycutest/master/.install_cutest.sh)"
        cd $SIFDECODE/src ; make -f $SIFDECODE/makefiles/$MYARCH test # test the SIFDecode library
        cd $CUTEST/src ; make -f $CUTEST/makefiles/$MYARCH test       # test the CUTEst library
        pip install pycutest


      # Run the package tests and generate the coverage report
    - name: Test with pytest
      env:
        ARCHDEFS: ${{github.workspace}}/cutest/archdefs
        SIFDECODE: ${{github.workspace}}/cutest/sifdecode
        MASTSIF: ${{github.workspace}}/cutest/mastsif
        CUTEST: ${{github.workspace}}/cutest/cutest
        MYARCH: "pc64.lnx.gfo"
        PYCUTEST_CACHE: ${{github.workspace}}/pycutest_cache
      run: |
        mkdir pycutest_cache
        pytest -m "not snopt and not visualization" tests/ --cov=aircraft_flight_simulator --cov-report lcov

    - name: Install
      run: npm install
    - name: Test and Coverage
      run: npm run test:cov  # or npm run coverage

    # Add this
    - name: Update Coverage Badge
      # GitHub actions: default branch variable
      # https://stackoverflow.com/questions/64781462/github-actions-default-branch-variable
      uses: we-cli/coverage-badge-action@main

  install-test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        update-environment: true
    
    - name: Install dependencies
      run: | 
        python -m pip install --upgrade pip
        python -m pip install .[test]

  install-test-interfaces:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        update-environment: true
    
    - name: Install dependencies
      run: | 
        python -m pip install --upgrade pip
        python -m pip install .[test,qpsolvers,pycutest,openmdao,jax]

  install-test-csdl:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        update-environment: true
    
    - name: Install dependencies
      run: | 
        python -m pip install --upgrade pip
        python -m pip install .[test,csdl]
